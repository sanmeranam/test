#!/usr/bin/env node

/**
 * Module dependencies.
 */


var ExternalSerice = require('../core/event/ExternalEvent');
var debug = require('debug')('FormAdmin:server');
var http = require('http');
var cluster = require('cluster');
/**
 * Get port from environment and store in Express.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    ExternalSerice.instance = new ExternalSerice(server);

    var addr = server.address();
    var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
    debug('Listening on ' + bind);
}





//if (cluster.isMaster) {
//    var cpuCount = require('os').cpus().length;
//    for (var i = 0; i < cpuCount; i += 1) {
//        cluster.fork();
//        console.log('Cluster started in CPU ' + i);
//    }
//} else {
    var app = require('../server');
    var port = normalizePort(app._port);
    app.set('port', port);

    var server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
//}